RESThub Spring stack Tutorial
=============================

This tutorial will help you to get an overview of resthub-spring-stack and its components and to take advantage of this framework and its tools.

Problem description
-------------------

During this tutorial we'll illustrate resthub usage with a sample and simple REST interface to manage tasks. Its components are:

.. image:: http://www.yuml.me/c57b8a61

Our REST interface will be mainly able to expose services to:

   - get all tasks
   - get all tasks & users paginated (with a page id and a page size)
   - get one task or user from its id
   - update one task or user from an updated object parameter
   - remove a task or user from its id
   
Each step of this tutorial is proposed as a git branch. You could checkout a step branch to get step instructions and solutions.
  
Step 1: Initialization
----------------------

**Prerequisites** :

   - Git installed : `<http://git-scm.com/downloads>`_
   - Maven installed : `<http://maven.apache.org/download.html>`_
   
**Solution** : you can find solution at `<spring/solution.html#step-1-initialization>`_

Find:
+++++

1. **Resthub2 getting started guide**
2. **Resthub2 documentation for Spring stack**
3. **Resthub2 javadoc site**
4. **List of Resthub2 underlying frameworks and corresponding documentation**

Do:
+++

1. **Generate a Resthub2 template project structure**

   You can choose which template to use : pure Java Spring server template or Server + Client template if you plan to provide a RIA client
   for your app based on `Resthub Spring Stack`
   
   Choose groupId `org.resthub.training`, artifactId `jpa-webservice`, package `org.resthub.training` and version `1.0-SNAPSHOT`.

2. **Run your project with mvn**

3. **Check on your browser that your project works and display XML representation for a sample object with id 1**.

Let's take a look at the generated project. Its structure is:

.. code-block:: text

   |--- src
   |   |--- main
   |   |    | --- java
   |   |    |     | --- org
   |   |    |           | --- resthub
   |   |    |                 | --- training
   |   |    |                       | --- controller
   |   |    |                       |     | --- SampleController.java
   |   |    |                       | --- model
   |   |    |                       |     | --- Sample.java
   |   |    |                       | --- repository
   |   |    |                       |     | --- SampleRepository.java
   |   |    |                       | --- SampleInitializer.java
   |   |    |                       | --- WebAppInitializer.java
   |   |    | --- resources
   |   |          | --- applicationContext.xml
   |   |          | --- database.properties
   |   |          | --- logback.xml
   |   |--- test
   |        | --- java
   |              | --- org
   |                    | --- resthub
   |                          | --- training
   | --- pom.xml
   
``src/main/java`` contains all java sources under the package ``org.resthub.training`` as specified during archetype generation.
This package contains the following sub packages and files: 

- **controller**: This package contains all your application controllers, i.e. your web API. In the generated sample, the archetype provided
  you a SampleController that simply extend ``RepositoryBasedRestController`` and apply its behaviour to the *Sample* model and
  *SampleRepository*: ``SampleController extends RepositoryBasedRestController<Sample, Long, SampleRepository>``. This generic ``RepositoryBasedRestController``
  provides basic CRUD functionalities: see Resthub2 documentation for details.
- **model**: This package contains all you domain models.
- **repository**: This package contains your repositories, i.e. classes that provide methods to manipulate, persist and retrieve your objects from your JPA
  manager (and so your database). In the generated sample, the archetype provided you a SampleRepository that simply extend Spring-Data ``JpaRepository``.
  for behaviour, see Spring-Data JPA documentation for details.
- **initializers**: Initializers are special classes executed at application startup to setup your webapp. ``WebappInitializer`` load your spring application contexts,
  setup filters, etc. (all actions that you previously configured in your web.xml). The archetype provided you a ``SampleInitializer`` to setup sepcific domain model
  initializations such as data creation.
  
``src/main/resources`` contains all non java source files and, in particular, your spring application context, your database configuration file and you logging configuration.

``src/test/`` contains, obviously, all you test related files and has the same structure as src/main (i.e. *java* and *resources*).


Step 2: Customize Model
-----------------------

**Solution** : you can find solution at `<spring/solution.html#step-2-customize-model>`_

Let's start to customize the project generated by our archetype.

We are going to create Contoller, Repository and, obviously Model for our Task object. We'll also adapt our Initializer in order to provide
some sample data at application startup. 

Do:
+++

1. **Replace the generated `Sample` related objects with `Task`**
2. **Modify all others components considering this modification**
3. **Check that your new API works**

Answer:
+++++++

Using an HTTP client (e.g. `Poster <https://addons.mozilla.org/en-US/firefox/addon/poster/>`_ in Firefox or 
`REST Console <https://chrome.google.com/webstore/detail/cokgbflfommojglbmbpenpphppikmonn>`_ in Chrome), 
explore the new API and check: 

1. **How is wrapped the list of all existing tasks ?**
2. **How to get a single task ?**
3. **How to update an existing task ? Update task 1 to add a description** ``new description``
4. **How to delete a task ?**       
5. **How to create a task ?**  

Step 3: Customize Controller
----------------------------

**Solution** : you can find solution at `<spring/solution.html#step-3-customize-controller>`_

We now have a basic REST interface uppon our Task model object providing default methods and behaviour implemented by resthub.

Let's suppose that the current findall : `<http://localhost:8080/api/task?page=all>`_ does not match our needs: the current implementation
returns a paginated list containing all elements in order to provide a consistent API between a *find all* and a *find paginated*.

In our case, we want a ``findAll`` implementation that returns a simple non paginated list of tasks: 

Do:
+++

1. **Modify** ``TaskController.java`` **to add a new method called** ``findAllNonPaginated``  **with no parameter mapped to** ``/api/task?page=no``.

   **Tip:** Consider using ``@ResponseBody`` annotation (see `<http://static.springsource.org/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-responsebody>`_)
   and request params mapping (see `<http://static.springsource.org/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-params-and-headers>`_).

   Implement this using existing repository method (see `Spring Data JPA documentation <http://static.springsource.org/spring-data/data-jpa/docs/current/api/>`_).
   Check on your browser that `<http://localhost:8080/api/task?page=no>`_ works and display a simple list of tasks, without pagination.
   
   e.g.

.. code-block:: javascript

   [{
       "id": 1,
       "name": "testTask1",
       "description": null
   }, {
       "id": 2,
       "name": "testTask2",
       "description": null
   }, {
       "id": 3,
       "name": "testTask3",
       "description": null
   }]

Test your controller
++++++++++++++++++++

We are going to test our new controller ``findAllNonPaginated`` method.

Find:
#####

1. **Resthub2 testing tooling documentation**

Do:
### 

1. **Add dependency to use Resthub2 testing tools** 
2. In ``src/test/org/resthub/training``, add a ``controller`` directory and create a ``TaskControllerTest`` inside. 
   We first want to make an **integration test** of our controller. i.e. a test that need to run and embedded servlet container.
   **Implement a new** ``findAllNonPaginated`` **test method that creates some tasks, call our new non paginated REST interface
   and check that the JSON response does not contain pagination-related String 'content'.** 
3. **Run test and check it passes**
    
Step 4: Users own tasks
-----------------------

**Prerequisites** : you can find some prerequisites and reference implementation of ``NotificationService`` and ``MockConfiguration`` at
`<http://github.com/resthub/resthub-spring-training/tree/step4-prerequisites>`_

**Solution** : you can find solution at `<spring/solution.html#step-4-users-own-tasks>`_

Find:
+++++

1. **Hibernate & JPA mapping documentation**
2. **Jackson annotations documentation**
3. **Resthub2 Crud Services documentation**
4. **Resthub2 Different kind of controllers documentation**
5. **Spring assertions documentation**
6. **Spring transactions documentation**

Do:
+++

1. **Implement a new domain model** ``User`` **containing a name and an email and owning tasks:**
   User owns 0 or n tasks and Task is owned by 0 or 1 user
   
   Each domain object should contain relation to the other. Relations should be **mapped with JPA** in order to be saved and retrieved from database.
   Be caution with potential infinite JSON serialization

2. **Provide dedicated Repository and Controller for user**

3. **Modify** ``TaskInitializer`` **in order to provide some sample users associated to tasks at startup**
   
4. **Check on your browser that User API** `<http://localhost:8080/api/user>`_ **works and provides simple CRUD and that** `<http://localhost:8080/api/task>`_ **still works**.

You can thus add domain models and provide for each one a simple CRUD API whithout doing nothing but defining empty repositories and controllers.
But if you have more than simple CRUD needs, resthub provides also a generic **Service layer** that could be extended to fit your business needs: 

5. **Create a new dedicated service (** ``TaskService``/``TaskServiceImpl`` **) for business user management** 
    - The new service should beneficiate of all CRUD Resthub services and work uppon TaskRepository.
    - Update your controller to manager this new 3 layers architecture
     
6. **Check that your REST interface is still working**

The idea is now to **add a method that affects a user to a task** based on user and task ids. During affectation, the user should be notified that a new task 
has been affected and, if exists, the old affected user should be notified that his affectation was removed. 
These business operations should be implemented in service layer: 

7. **Declare and implement method** ``affectTaskToUser`` **in (**``TaskService`` / ``TaskServiceImpl``**)**
   
   Notification simulation should be performed by implementing a custom ``NotificationService`` that simply
   logs the event (you can also get the implementation from our repo in step4 solution). It is important to have an independant service (for mocking - see below - purposes)
   and you should not simply log in your new method. 
  
   **Signatures:**
    
   .. code-block:: java

      // NotificationService
      void send(String email, String message);
       
      // TaskService
      Task affectTask(Long taskId, Long userId);
  
   - In ``affectTask`` implementation, validate parameters to ensure that both userId and taskId are not null and correspond to existing objects
   - Tip : You will need to manipulate userRepository in TaskService ...
   - Tip 2 : You don't even have to call ``repository.save()`` due to Transactional behaviour of your service
   - Tip 3 : Maybe you should consider to implement ``equals()`` and ``hashCode()`` methods for User & Task   
 
Test your new service
+++++++++++++++++++++

We will now write an integration test for our new service:

Find:
#####

1. **Resthub2 testing tooling documentation**

Do:
###  

1. **Create a new** ``TaskServiceIntegrationTest`` **integration test in** ``src/test/org/resthub/training/service/integration``
   This test should be **aware of spring context but non transactional** because testing a service should be done in a non transactional way. This is indeed the
   way in which the service will be called (e.g. by controller). The repository test should extend ``org.resthub.test.common.AbstractTransactionalTest`` to be run
   in a transactional context, as done by service.

    This test should perform an unique operation:

    - Create user and task and affect task to user.
    - Refresh the task by calling service.findById and check the retrived task contains the affected user  

2. **Run test and check it passes**

Mock notification service
+++++++++++++++++++++++++

If you didn't do anything else, you can see that we didn't manage notification service calls. In our case, this is not a real problem because
our implementation simply perform a log. But in a real sample, this will lead our unit tests to send a mail to a user (and thus will need for us to
be able to send a mail in tests, etc.). So **we need to mock**.

Find:
#####

1. **Mockito documentation**

Do:
###  

1. **Add in** ``src/test/java/org/resthub/training`` **a new** ``MockConfiguration`` **class** 

.. code-block:: java

   @Configuration
   @ImportResource("classpath*:applicationContext.xml")
   @Profile("test")
   public class MocksConfiguration {
       @Bean(name = "notificationService")
       public NotificationService mockedNotificationService() {
           return mock(NotificationService.class);
       }
   }
   
This class allows to define a mocked alias bean to notificationService bean for test purposes. Its is scoped as **test profile** 
(see `documentation <http://blog.springsource.com/2011/02/14/spring-3-1-m1-introducing-profile/>`_).

2. **Modify your** ``TaskServiceIntegrationTest`` **to load our configuration**

.. code-block:: java

   @ContextConfiguration(loader = AnnotationConfigContextLoader.class, classes = MocksConfiguration.class)
   @ActiveProfiles("test")
   public class TaskServiceIntegrationTest extends AbstractTest {
      ...
   }
   
3. **Modify your test to check that** ``NotificationService.send()`` **method is called once when a user is affected to a task and twice if there was
   already a user affected to this task. Check the values of parameters passed to send method.**
  
This mock allows us to verify integration with others services and API whitout testing all these external tools.

This integration test is really usefull to validate your the complete chain i.e. service -> repository -> database (and, thus, your JPA mapping)
but, it is not necessary to write integration tests to test only your business and the logic of a given method.

It is really more performant and efficient to write *real unit tests* by using mocks.

Unit test with mocks
++++++++++++++++++++

Do:
###  

1. **Create a new** ``TaskServiceTest`` **class in** ``src/test/java/org/resthub/training/service``

   - Declare and mock ``userRepository``, ``taskRepository`` and ``notificationService``. Find a way to inject userRepository and notificationService in
     ``TaskServiceImpl``
   - Define that when call in ``userRepository.findOne()`` with parameter equal to 1L, the mock will return a valid user instance, null otherwise.
   - Define that when call in ``taskRepository.findOne()`` with parameter equal to 1L, the mock will return a valid task instance, null otherwise.
   - Provide these mocks to a new TaskServiceImpl instance (note that this test is a real unit test so we fon't use spring at all).
   - This should be done once for all tests in file.
 
2. **Implement tests**
   
   - Check that the expected exception is thrown when userId or taskId are null   
   - Check that the expected exception is thrown when userId or taskId does not match any object.
   - Check that the returned task contains the affected user.
    
Working mainly with unit tests (whithout launching spring context, etc.) is really more efficient to write and run and should be preffered to
systematic complete integration tests. Note that you still have to provide, at least, one integration test in order to verify mappings and complete
chain.
  
Create correponding method in controller to call this new service layer
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Do:
###  

- Implement a new method API in controller to affect a task to a user that call ``taskService.affectTaskToUser`` method. This API could be reached at ``/api/task/1/user/1`` on a 
  ``PUT`` request in order to affect user 1 to task 1.

You can test in your browser (or, better, add a test in ``TaskControllerTest``) that the new API is operational.


Step 5: Validate your beans and embed entities
----------------------------------------------

**Solution** : you can find solution at `<spring/solution.html#step-5-validate-your-beans-and-embed-entities>`_

Finally, we want to add validation constraints to our model. This could be done by using BeanValidation (JSR303 Spec) and its reference
implementation: Hibernate Validator. see `documentation <http://docs.jboss.org/hibernate/validator/4.1/reference/en-US/html_single/>`_

Find:
+++++

1. **Bean Validation and Hibernate Validators documentation**
2. **JPA / Hibernate embedded entities documentation**

Do:
+++ 

1. **Modify User and Task to add validation**

    - User name and email are mandatory and not empty
    - User email should match regexp ``.+@.+\\.[a-z]+``
    - Task title is mandatory and not empty
 
2. **If your integration tests (and initializer) fail. Make it pass**

3. **Add embedded address to users : Modify User model to add an embedded entity address to store user address (city, country)**

4. **Add a** ``UserRepositoryIntegrationTest`` **class in** ``src/test/java/org/resthub/training/repository/integration`` **and implement
   a test that try to create a user with an embedded address**. 
   
   Check that you can then call a findOne of this user and that the return object contains address object.
    
5. **Add nested validation for embedded address. city and country should not be null and non empty**

6. **Modify** ``UserRepositoryIntegrationTest`` **to test that a user can be created with a null address but exception is thrown when 
   address is incomplete (e.g. country is null or empty)**
   